//////////////////////////////////////////////////////////////////////////////Prueba_SQL//////////////////////////////////////////////////////////////////////////////

/*1. Revisa  el  tipo  de  relación  y  crea  el  modelo correspondiente. Respeta las claves primarias, foráneas y tipos de datos.*/


	CREATE TABLE "Peliculas"     (id             Integer,
								 nombre          Varchar (255),
								 anno            Integer,
								 PRIMARY KEY     (id)
								 );

	CREATE TABLE "Tags"          (id             Integer,
								 tag             Varchar (32),
								 PRIMARY KEY     (id)
								 );

	CREATE TABLE "PeliculasTags" ("Peliculas_id" Integer, 
								  "Tags_id"      Integer,
								  FOREIGN KEY    ("Peliculas_id")
								  REFERENCES     "Peliculas" (id),
								  FOREIGN KEY    ("Tags_id")
								  REFERENCES     "Tags" (id)
								  );

/*2. Inserta  5  películas  y  5  tags;  la primera película debe tener 3 tags asociados, la segunda película debe tener 2 tags asociados.*/

-- Insertando registros a las tablas.

	INSERT INTO "Peliculas" (id, nombre, anno)
	VALUES (1,'El Padrino', 1972),
		   (2,'Titanic', 1997),
		   (3,'Star Wars: Episodio IV', 1977),
		   (4,'El Señor de los Anillos: La Comunidad del Anillo', 2001),
		   (5,'La La Land', 2016);

	INSERT INTO "Tags" (id, tag)
	VALUES (1,'Drama'),
		   (2,'Crimen'),
		   (3,'Mafia'),
		   (4,'Romance'),
		   (5,'Drama');

	INSERT INTO "PeliculasTags" ("Peliculas_id","Tags_id")
	VALUES (1,1),
		   (1,2),
		   (1,3),
		   (2,4),
		   (2,5);


/*3. Cuenta la cantidad de tags que tiene cada película. Si una película no tiene tags debe mostrar 0.*/

	SELECT p.id "Numero de la pelicula", p.nombre AS "Nombre de la pelicula", count(pt."Tags_id")  AS "Cantidad de Tags asociados"
	FROM "Peliculas" p
	FULL JOIN "PeliculasTags" pt ON p.id = pt."Peliculas_id"
	GROUP BY p.id, p.nombre
	ORDER BY p.id ASC;

/*4. Dado el siguiente modelo, crea las tablas correspondientes respetando los nombres, tipos, claves primarias y foráneas y tipos de datos.*/

	CREATE TABLE "Preguntas" (id                 Integer,
							  pregunta           Varchar (255),
							  respuesta_correcta Varchar,
							  PRIMARY KEY (id)
							  );

	CREATE TABLE "Usuarios"  (id                 Integer,
							  nombre             Varchar (255),
							  edad               Integer,
							  PRIMARY KEY (id)
							  );

	CREATE TABLE "Respuestas"(id                 Integer,
							  respuesta          Varchar (255),
							  usuario_id         Integer,
							  pregunta_id        Integer,
							  PRIMARY KEY        (id),
							  FOREIGN KEY        (usuario_id)
							  REFERENCES         "Usuarios" (id),
							  FOREIGN KEY        (pregunta_id)
							  REFERENCES         "Preguntas" (id)
							  );

/*5. Agrega 5 usuarios y 5 preguntas.

	a. La primera pregunta debe estar respondida correctamente dos veces, por dos 
	usuarios diferentes.
	b. La  segunda  pregunta  debe  estar  contestada  correctamente  solo  por  un 
	usuario.
	c. Las otras dos preguntas deben tener respuestas incorrectas*/

	-- Preguntas					 
	INSERT INTO "Preguntas" (id, pregunta, respuesta_correcta)
	    VALUES  (1,'Pregunta 1', 'A'),
				(2,'Pregunta 2', 'B'),
				(3,'Pregunta 3', 'C'),
				(4,'Pregunta 4', 'D'),
				(5,'Pregunta 5', 'E');

	-- Usuarios	   
	INSERT INTO "Usuarios" (id, nombre, edad)
	    VALUES  (1,'Usuario 1', 21),
				(2,'Usuario 2', 22),
				(3,'Usuario 3', 23),
				(4,'Usuario 4', 24),
				(5,'Usuario 5', 25);
				
	-- Respuestas para la pregunta 1
	INSERT INTO "Respuestas" (id, respuesta, usuario_id, pregunta_id)
		VALUES  (1 , 'A', 1, 1),     -- Respuesta correcta para la pregunta 1
			    (6 , 'A', 2, 1),     -- Respuesta correcta para la pregunta 1
			    (11, 'X', 3, 1),     -- Respuesta incorrecta para la pregunta 1
			    (16, 'X', 4, 1),     -- Respuesta incorrecta para la pregunta 1
			    (21, 'X', 5, 1);     -- Respuesta incorrecta para la pregunta 1

	-- Respuestas para la pregunta 2
	INSERT INTO "Respuestas" (id, respuesta, usuario_id, pregunta_id)
		VALUES  (2 , 'X', 1, 2),     -- Respuesta incorrecta para la pregunta 2
			    (7 , 'X', 2, 2),     -- Respuesta incorrecta para la pregunta 2
			    (12, 'B', 3, 2),     -- Respuesta correcta para la pregunta 2
			    (17, 'X', 4, 2),     -- Respuesta incorrecta para la pregunta 2
			    (22, 'X', 5, 2);     -- Respuesta incorrecta para la pregunta 2

	-- Respuestas para la pregunta 3
	INSERT INTO "Respuestas" (id, respuesta, usuario_id, pregunta_id)
		VALUES  (3 , 'X', 1, 3),     -- Respuesta incorrecta para la pregunta 3
		  	    (8 , 'X', 2, 3),     -- Respuesta incorrecta para la pregunta 3
		  	    (13, 'X', 3, 3),     -- Respuesta incorrecta para la pregunta 3
		  	    (18, 'X', 4, 3),     -- Respuesta incorrecta para la pregunta 3
		  	    (23, 'X', 5, 3);     -- Respuesta incorrecta para la pregunta 3

	-- Respuestas para la pregunta 4
	INSERT INTO "Respuestas" (id, respuesta, usuario_id, pregunta_id)
		VALUES  (4 , 'X', 1, 4),     -- Respuesta incorrecta para la pregunta 4
			    (9 , 'X', 2, 4),     -- Respuesta incorrecta para la pregunta 4
			    (14, 'X', 3, 4),     -- Respuesta incorrecta para la pregunta 4
			    (19, 'X', 4, 4),     -- Respuesta incorrecta para la pregunta 4
			    (24, 'X', 5, 4);     -- Respuesta incorrecta para la pregunta 4

	-- Respuestas para la pregunta 5
	INSERT INTO "Respuestas" (id, pregunta_id)
		VALUES  (5 , 5),     -- Respuesta incorrecta para la pregunta 5
			    (10, 5),     -- Respuesta incorrecta para la pregunta 5
			    (15, 5),     -- Respuesta incorrecta para la pregunta 5
			    (20, 5),     -- Respuesta incorrecta para la pregunta 5
			    (25, 5);     -- Respuesta incorrecta para la pregunta 5
			   


/*6. Cuenta la cantidad de respuestas correctas totales por usuario (independiente de la pregunta).*/

	SELECT u.nombre AS "Usuario", COUNT(p.respuesta_correcta) AS "Respuestas correctas"
	FROM "Usuarios" u
	LEFT JOIN "Respuestas" r ON u.id = r.usuario_id
	LEFT JOIN "Preguntas" p ON r.pregunta_id = p.id AND r.respuesta = p.respuesta_correcta
	GROUP BY u.nombre
	ORDER BY u.nombre;

/*7. Por  cada  pregunta,  en  la  tabla preguntas, cuenta cuántos usuarios respondieron correctamente*/

	SELECT p.pregunta AS "Preguntas", COUNT(DISTINCT u.id) AS "Usuarios que respondieron correctamente"
	FROM "Preguntas" p
	LEFT JOIN "Respuestas" r ON r.pregunta_id = p.id AND r.respuesta = p.respuesta_correcta
	LEFT JOIN "Usuarios" u ON u.id = r.usuario_id 
	GROUP BY p.pregunta
	ORDER BY p.pregunta;

/*8. Implementa un borrado en cascada de las respuestas al borrar un usuario. Prueba la implementación borrando el primer usuario.*/

	-- Implementamos el borrado en cascada para forzar el borrado de un id de la PK de "Usuarios"(id)
	ALTER TABLE "Respuestas"  DROP CONSTRAINT "Respuestas_usuario_id_fkey",  
	ADD FOREIGN KEY (usuario_id) REFERENCES "Usuarios"(id) ON DELETE CASCADE;

	-- Probamos:
	DELETE FROM "Usuarios" 
	WHERE id = 1;
	
/*9. Crea una restricción que impida insertar usuarios menores de 18 años en la base de datos.*/

	-- Restriccion con CHECK:
	ALTER TABLE "Usuarios"
	ADD CONSTRAINT edad_check CHECK (edad >= 18);

	-- Probamos:
	INSERT INTO "Usuarios" (id,nombre,edad)
		VALUES  (10, 'Claudia', 10);

/*10. Altera  la  tabla  existente  de  usuarios  agregando  el  campo  email.  Debe  tener  la restricción de ser único.*/
	
	-- Restriccion con UNIQUE:
	ALTER TABLE "Usuarios"
	ADD COLUMN email varchar (255) UNIQUE;

	-- Probamos:
	INSERT INTO "Usuarios" (id, nombre, edad,email)
		VALUES  (13,'Claudia', 18, 'claudia@gmail.com'),
	 	        (14,'Claudia', 19, 'claudia@gmail.com');
	   


	